! --------------------------------------------------------------------
! Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
!
subroutine stabBTsigma(nb_node  , nb_dof  ,&
                      geom_init , Ueff    ,disp ,l_large, &
                      stabbsigma)
!
implicit none
!

#include "asterf_types.h"
#include "jeveux.h"
#include "asterc/r8vide.h"
#include "asterf_types.h"
#include "asterfort/assert.h"
#include "asterfort/btsig.h"
#include "asterfort/shbBMatrix.h"
#include "asterfort/contraintestab.h"
!
aster_logical, intent(in) :: l_large
integer, intent(in) :: nb_node, nb_dof
real(kind=8), intent(in) :: geom_init(3*nb_node), Ueff,disp(nb_dof)
real(kind=8), intent(out) :: stabbsigma(nb_dof)
!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute B^T . SIGMA
!
! --------------------------------------------------------------------------------------------------
!
! In  npg              : number of Gauss points
! In  nbsig            : number stress components
! In  nb_node          : number of nodes of element without pinch node(s)
! In  nb_dof           : number of dof
! In  jv_coopg         : JEVEUX adress to coordinates of Gauss points
! In  jv_poids         : JEVEUX adress for weight of Gauss points 
! In  geom_init        : initial coordinates of element
! In  sigm             : stress at Gauss points
! In  det              : determinant of initial jacobian matrix
! In  B0               : constant part of gradient matrix
! In  BZETA            : zeta part of gradient matrix
! In  BZETAZETA        : zeta x zeta part of gradient matrix
! Out bsigma           : product B^T . sigma each Gauss point
!
! --------------------------------------------------------------------------------------------------
!
    integer :: kpg
    real(kind=8) :: B(6, 25), poids, zeta,det
    real(kind=8) :: BXI(6, 24), BXIZETA(6, 24),BETA(6, 24),BETAZETA(6, 24)
    real(kind=8) :: aux1, aux2
    real(kind=8) :: SHXI(6), SHETA(6), SHETAZETA(6), SHXIZETA(6)
!
! --------------------------------------------------------------------------------------------------
!
    stabbsigma(:) = 0.d0
!
    call shbBMatrix(nb_node, nb_dof     ,l_large    ,&
                    0.d0   , geom_init  ,disp       , det,B, &
                    BXI    , BXIZETA    ,BETA       ,BETAZETA)

    call contraintestab(l_large    ,&
                        nb_node    , nb_dof    ,&
                        geom_init  , disp      , Ueff,&
                        BXI        , BETA   ,&
                        BETAZETA   , BXIZETA,&
                        SHXI       , SHETA     ,&
                        SHETAZETA  , SHXIZETA)
!
! - Compute stabilisation for internal forces
!
    aux1  = 8.d0/3.d0
    aux2  = 8.d0/9.d0
    stabbsigma(1:3*nb_node) = abs(det)*(matmul(transpose(BXI),SHXI) +&
                                 matmul(transpose(BETA),SHETA))*aux1+&
                     abs(det)*(matmul(transpose(BETAZETA),SHETAZETA)+&
                            matmul(transpose(BXIZETA),SHXIZETA))*aux2
!
end subroutine
