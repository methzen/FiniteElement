! --------------------------------------------------------------------
! Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
!
subroutine rigigeostab(nb_node    , nb_dof,&
                       geom_init  , disp      , Ueff,&
                       BXIdev     , BETAdev   ,&
                       BETAZETAdev, BXIZETAdev,BXIETAdev,&
                       Kgstab)
!
implicit none
!
#include "asterf_types.h"
#include "asterfort/matriceTdecomp.h"
#include "asterfort/matriceT.h"
#include "asterfort/dshape.h"
#include "asterfort/assert.h"
#include "asterfort/contraintestab.h"
!
integer, intent(in) :: nb_node, nb_dof
real(kind=8), intent(in) :: geom_init(3*nb_node), disp(nb_dof), Ueff
real(kind=8), intent(in) :: BXIdev(6,3*nb_node), BETAdev(6,3*nb_node),BXIETAdev(6,3*nb_node)
real(kind=8), intent(in) :: BXIZETAdev(6,3*nb_node), BETAZETAdev(6,3*nb_node)
real(kind=8), intent(out) :: Kgstab(3*nb_node,3*nb_node)
!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute stabilisation for geometric rigidity matrix at current Gauss point
!
! --------------------------------------------------------------------------------------------------
!
! In  nb_node          : number of nodes of element without pinch node(s)
! In  nb_dof           : number of dof
! In  geom_init        : initial coordinates of element
! In  disp             : displacements of element
! In  Ueff             : effective shear modulus
! In  BXIdev           : xi part of gradient matrix (deviatoric part)
! In  BETAdev          : eta part of gradient matrix (deviatoric part)
! In  BETAZETAdev      : eta x zeta part of gradient matrix (deviatoric part)
! In  BXIZETAdev       : xi x zeta part of gradient matrix (deviatoric part)
! Out Kgstab           : stabilisation for geometric rigidity matrix
!
! --------------------------------------------------------------------------------------------------
!
    integer :: I, J, L1, L2, C1, C2, AD, EH, JM
    real(kind=8) :: eye(3,3)
    real(kind=8) :: XIEH(4,3), XIAD(4,3), XIJM(4,3)
    real(kind=8) :: dN_dXsi(8), dN_dEta(8), dN_dZeta(8)
    real(kind=8) :: aux13, aux23, aux33, aux12, aux11, aux22
    real(kind=8) :: SHXI(6), SHETA(6), SHETAZETA(6), SHXIZETA(6),SHXIETA(6)
    real(kind=8) :: TXI(6,6), TETA(6,6), TZETA(6,6), T0(6,6)
    real(kind=8) :: const
    real(kind=8)::  g1(8), g2(8), g3(8)
    real(kind=8)::  h1(8), h2(8), h3(8), h4(8)
    real(kind=8) :: Gc0(6), Gczeta(6), GcXI(6)
    real(kind=8) :: GcETA(6), GcETAZETA(6), GcXIZETA(6)
    real(kind=8) :: GXI(6), GETA(6), GETAZETA(6), GXIZETA(6),GcXIETA(6),GXIETA(6)
    real(kind=8), parameter :: IDEN(6) = (/1.d0, 1.d0, 1.d0, 0.d0, 0.d0, 0.d0/)
    aster_logical :: l_large
!
! --------------------------------------------------------------------------------------------------
!
    ASSERT(nb_node .eq. 8)
    ASSERT(nb_dof .eq. 25)
!
    Kgstab = 0.d0
    eye    = 0.d0
    do i = 1,3
        eye(i,i) = 1.d0
    enddo
    l_large = ASTER_TRUE
!
! - Vectors for decomposition
!
    g1=(/-1.d0,  1.d0,  1.d0, -1.d0, -1.d0,  1.d0, 1.d0, -1.d0/)/8.d0
    g2=(/-1.d0, -1.d0,  1.d0,  1.d0, -1.d0, -1.d0, 1.d0,  1.d0/)/8.d0
    g3=(/-1.d0, -1.d0, -1.d0, -1.d0,  1.d0,  1.d0, 1.d0,  1.d0/)/8.d0
    h1=(/ 1.d0, -1.d0,  1.d0, -1.d0,  1.d0, -1.d0, 1.d0, -1.d0/)/8.d0
    h2=(/ 1.d0,  1.d0, -1.d0, -1.d0, -1.d0, -1.d0, 1.d0,  1.d0/)/8.d0
    h3=(/ 1.d0, -1.d0, -1.d0,  1.d0, -1.d0,  1.d0, 1.d0, -1.d0/)/8.d0
    h4=(/-1.d0,  1.d0, -1.d0,  1.d0,  1.d0, -1.d0, 1.d0, -1.d0/)/8.d0
!
    XIEH(1,1) = -1.d0
    XIEH(1,2) = +0.d0
    XIEH(1,3) = -1.d0
    XIEH(2,1) = +1.d0
    XIEH(2,2) = +0.d0
    XIEH(2,3) = -1.d0
    XIEH(3,1) = +1.d0
    XIEH(3,2) =  0.d0
    XIEH(3,3) = +1.d0
    XIEH(4,1) = -1.d0
    XIEH(4,2) =  0.d0
    XIEH(4,3) = +1.d0
!
    XIAD(1,1) = -1.d0
    XIAD(1,2) = -1.d0
    XIAD(1,3) =  0.d0
    XIAD(2,1) = +1.d0
    XIAD(2,2) = -1.d0
    XIAD(2,3) =  0.d0
    XIAD(3,1) = +1.d0
    XIAD(3,2) = +1.d0
    XIAD(3,3) =  0.d0
    XIAD(4,1) = -1.d0
    XIAD(4,2) = +1.d0
    XIAD(4,3) =  0.d0
!
    XIJM(1,1) =  0.d0
    XIJM(1,2) = -1.d0
    XIJM(1,3) = -1.d0
    XIJM(2,1) =  0.d0
    XIJM(2,2) = +1.d0
    XIJM(2,3) = -1.d0
    XIJM(3,1) =  0.d0
    XIJM(3,2) = +1.d0
    XIJM(3,3) = +1.d0
    XIJM(4,1) =  0.d0
    XIJM(4,2) = -1.d0
    XIJM(4,3) = +1.d0
!
! - Compute the decomposition of the inverse Jacobian matrix
!
    call matriceTdecomp(nb_node, geom_init, TXI, TETA, TZETA)
!
! - Compute matrix relating the convective and Cartesian frame
!
    call matriceT(nb_node, geom_init, (/0.d0,0.d0,0.d0/), T0)
!
! - Compute stabilisation stresses
!
    call contraintestab(l_large    ,&
                        nb_node    , nb_dof    ,&
                        geom_init  , disp      , Ueff,&
                        BXIdev     , BETAdev   ,&
                        BETAZETAdev, BXIZETAdev,BXIETAdev,&
                        SHXI       , SHETA     ,&
                        SHETAZETA  , SHXIZETA,SHXIETA)
!
! - Compute matrix
!
    do I = 1, nb_node
        do J = 1, nb_node
            L1=3*(I-1)+1
            L2=3*(I-1)+3
            C1=3*(J-1)+1
            C2=3*(J-1)+3
! --------- Term Gc0
            aux33 = 0.d0
            aux23 = 0.d0
            aux13 = 0.d0
            do AD = 1, 4
                call dshape(nb_node, XIAD(AD,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux33 = aux33+dN_dZeta(I)*dN_dZeta(J)
            end do
            do EH = 1, 4
                call dshape(nb_node, XIEH(EH,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux23 = aux23+(dN_dEta(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dEta(J))/4.d0
            end do
            do JM = 1, 4
                call dshape(nb_node, XIJM(JM,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux13 = aux13+(dN_dXsi(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dXsi(J))/4.d0
            end do
            Gc0(1)=g1(I)*g1(J)
            Gc0(2)=g2(I)*g2(J)
            Gc0(3)=aux33
            Gc0(4)=g1(I)*g2(J)+g2(I)*g1(J)
            Gc0(5)=aux13
            Gc0(6)=aux23
! --------- Term GcZETA
            aux23 = 0.d0
            aux13 = 0.d0
            do EH = 1, 4
                call dshape(nb_node, XIEH(EH,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux23 = aux23+XIEH(EH,3)*(dN_dEta(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dEta(J))/4.d0
            end do
            do JM = 1, 4
                call dshape(nb_node, XIJM(JM,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux13 = aux13+XIJM(JM,3)*(dN_dXsi(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dXsi(J))/4.d0
            end do
            aux12=h2(I)*g1(J)+h3(I)*g2(J)+g2(I)*h3(J)+g1(I)*h2(J)
            GcZETA(1)=h3(I)*g1(J)+g1(I)*h3(J)
            GcZETA(2)=h2(I)*g2(J)+g2(I)*h2(J)
            GcZETA(3)=0.d0
            GcZETA(4)=aux12
            GcZETA(5)=aux13
            GcZETA(6)=aux23
! --------- Term GcXI
            aux33 = 0.d0
            aux23  =0.d0
            do AD = 1, 4
                call dshape(nb_node, XIAD(AD,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux33 = aux33+XIAD(AD,1)*(dN_dZeta(I)*dN_dZeta(J))/4.d0
            end do
            do EH = 1, 4
                call dshape(nb_node, XIEH(EH,1:3),dN_dXsi,dN_dEta,dN_dZeta)
                aux23 = aux23+XIEH(EH,1)*(dN_dEta(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dEta(J))/4.d0
            end do
            GcXI(1)=0.d0
            GcXI(2)=h1(I)*g2(J)+g2(I)*h1(J)
            GcXI(3)=aux33
            GcXI(4)=h1(I)*g1(J)+g1(I)*h1(J)
            GcXI(5)=0.d0
            GcXI(6)=aux23
! --------- Term GcETA
            aux33 = 0.d0
            aux13 = 0.d0
            do AD = 1, 4
                call dshape(nb_node, XIAD(AD,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux33 = aux33+XIAD(AD,2)*(dN_dZeta(I)*dN_dZeta(J))/4.d0
            end do
            do JM = 1, 4
                call dshape(nb_node, XIJM(JM,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux13 = aux13+XIJM(JM,2)*(dN_dXsi(I)*dN_dZeta(J)+dN_dZeta(I)*dN_dXsi(J))/4.d0
            end do
            GcETA(1)=h1(I)*g1(J)+g1(I)*h1(J)
            GcETA(2)=0.d0
            GcETA(3)=aux33
            GcETA(4)=h1(I)*g2(J)+g2(I)*h1(J)
            GcETA(5)=aux13
            GcETA(6)=0.d0
! --------- Term GcETAZETA
            aux11 = h4(I)*g1(J)+h3(I)*h1(J)+h1(I)*h3(J)+g1(I)*h4(J)
            aux12 = h4(I)*g2(J)+h2(I)*h1(J)+h1(I)*h2(J)+g2(I)*h4(J)
            aux13 = 0.d0
            do JM = 1, 4
                call dshape(nb_node, XIJM(JM,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux13 = aux13+&
                        XIJM(JM,2)*XIJM(JM,3)*(dN_dXsi(I)*dN_dZeta(J)+dN_dXsi(J)*dN_dZeta(I))/4.d0
            end do
            GcETAZETA(1)=aux11
            GcETAZETA(2)=0.d0
            GcETAZETA(3)=0.d0
            GcETAZETA(4)=aux12
            GcETAZETA(5)=aux13
            GcETAZETA(6)=0.d0
! --------- Term GcXIZETA
            aux22 = h4(I)*g2(J)+h2(I)*h1(J)+h1(I)*h2(J)+g2(I)*h4(J)
            aux12 = h4(I)*g1(J)+h3(I)*h1(J)+h1(I)*h3(J)+g1(I)*h4(J)
            aux23 = 0.d0
            do EH = 1, 4
                call dshape(nb_node, XIEH(EH,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux23 = aux23+&
                        XIEH(EH,1)*XIEH(EH,3)*(dN_dEta(I)*dN_dZeta(J)+dN_dEta(J)*dN_dZeta(I))/4.d0
            end do
            GcXIZETA(1)=0.d0
            GcXIZETA(2)=aux22
            GcXIZETA(3)=0.d0
            GcXIZETA(4)=aux12
            GcXIZETA(5)=0.d0
            GcXIZETA(6)=aux23
! --------- Term GcXIETA
            aux33 = 0.d0
            do AD = 1, 4
                call dshape(nb_node, XIAD(AD,1:3), dN_dXsi, dN_dEta, dN_dZeta)
                aux33 = aux33+XIAD(AD,2)*XIAD(AD,1)*(dN_dZeta(I)*dN_dZeta(J))/4.d0
            end do
            GcXIETA(1)=0.d0
            GcXIETA(2)=0.d0
            GcXIETA(3)=aux33
            GcXIETA(4)=2.d0*h1(I)*h1(J)
            GcXIETA(5)=0.d0
            GcXIETA(6)=0.d0

!-----------------------------------------------------------------------------------
            GXI      = matmul(T0,GcXI)+matmul(TXI,Gc0)
            GETA     = matmul(T0,GcETA)+matmul(TETA,Gc0)
            GETAZETA = matmul(T0,GcETAZETA)+matmul(TETA,GcZETA)+matmul(TZETA,GcETA)
            GXIZETA  = matmul(T0,GcXIZETA)+matmul(TXI,GcZETA)+matmul(TZETA,GcXI)
            GXIETA   = (matmul(T0,GcXIETA)+matmul(TXI,GcETA)+matmul(TETA,GcXI))
! --------- Deviatoric part
            !GXI      = GXI-(GXI(1)+GXI(2)+GXI(3))*IDEN/3.d0
            !GETA     = GETA-(GETA(1)+GETA(2)+GETA(3))*IDEN/3.d0
            !GETAZETA = GETAZETA-(GETAZETA(1)+GETAZETA(2)+GETAZETA(3))*IDEN/3.d0
            !GXIZETA  = GXIZETA-(GXIZETA(1)+GXIZETA(2)+GXIZETA(3))*IDEN/3.d0
!
            const = sum(SHXI*GXI)*(8.d0/3.d0)+sum(SHETA*GETA)*(8.d0/3.d0)+&
                   (sum(SHETAZETA*GETAZETA)+sum(SHXIZETA*GXIZETA)+0.d0*sum(SHXIETA*GXIETA))*(8.d0/9.d0)
            Kgstab(L1:L2,C1:C2) = const*eye
        end do
    end do
!
    !WRITE(6,*) 'Compute stabilisation for geometric rigidity matrix: ',Kgstab
!
end subroutine
