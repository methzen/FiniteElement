! --------------------------------------------------------------------
! Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
!
subroutine shbBTsigma(npg      , nbsig   ,&
                      nb_node  , nb_dof  ,&
                      jv_coopg , jv_poids,j_mater,&
                      geom_init, sigm    ,disp,l_large,&
                      bsigma,Ueff)
!
implicit none
!
#include "asterf_types.h"
#include "jeveux.h"
#include "asterc/r8vide.h"
#include "asterf_types.h"
#include "asterfort/assert.h"
#include "asterfort/btsig.h"
#include "asterfort/shbBMatrix.h"
#include "asterfort/rcvalb.h"
#include "asterfort/nmgeosb9.h"
#include "asterfort/calculUeff.h"
!
aster_logical, intent(in) :: l_large
integer, intent(in) :: npg, nbsig, nb_node, nb_dof
integer, intent(in) :: jv_coopg, jv_poids,j_mater
real(kind=8), intent(in) :: geom_init(3*nb_node), sigm(nbsig*npg),disp(nb_dof)
real(kind=8), intent(out) :: bsigma(3*nb_node+1),Ueff
!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute B^T . SIGMA
!
! --------------------------------------------------------------------------------------------------
!
! In  npg              : number of Gauss points
! In  nbsig            : number stress components
! In  nb_node          : number of nodes of element without pinch node(s)
! In  nb_dof           : number of dof
! In  jv_coopg         : JEVEUX adress to coordinates of Gauss points
! In  jv_poids         : JEVEUX adress for weight of Gauss points 
! In  geom_init        : initial coordinates of element
! In  sigm             : stress at Gauss points
! In  det              : determinant of initial jacobian matrix
! In  B0               : constant part of gradient matrix
! In  BZETA            : zeta part of gradient matrix
! In  BZETAZETA        : zeta x zeta part of gradient matrix
! Out bsigma           : product B^T . sigma each Gauss point
!
! --------------------------------------------------------------------------------------------------
!
    integer :: kpg,nbv,icodre(2)
    real(kind=8) :: B(6, 25), poids, zeta,deter,u1eff,det,mu
    real(kind=8) :: BXI(6, 24), BXIZETA(6, 24),BETA(6, 24),BETAZETA(6, 24),epsi(6),para(2)
    character(len=8) :: nomres(2)
!
! --------------------------------------------------------------------------------------------------
!
! - Material parameters
!
    nomres(1) = 'E'
    nomres(2) = 'NU'
    nbv = 2

    bsigma(:) = 0.d0
    Ueff=0.d0
!
!      Retrieving matrial data
!
    do kpg = 1, npg
        poids = zr(jv_poids+kpg-1)
        zeta  = zr(jv_coopg-1+3*kpg)
!
        call rcvalb('RIGI', kpg, 1, '+', j_mater,&
                   ' ', 'ELAS', 1, 'INST', [0.d0],&
                   nbv, nomres, para, icodre, 1)
        mu = 0.5d0*para(1)/(1+para(2))
!
        call nmgeosb9(l_large  , nb_node  , nb_dof,&
                      geom_init, zeta     , disp  ,&
                      det      , epsi)

        call calculUeff(sigm(1+nbsig*(kpg-1)), epsi, mu,u1eff)
        Ueff = Ueff + u1eff*poids/8.d0

        call shbBMatrix(nb_node, nb_dof     ,l_large,&
                        zeta   , geom_init  ,disp       , deter,B, &
                        BXI    , BXIZETA    ,BETA       ,BETAZETA)
        call btsig(nb_dof, nbsig, deter*poids, B, sigm(1+nbsig*(kpg-1)), bsigma)
    end do
!
end subroutine
