! --------------------------------------------------------------------
! Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
! aslint: disable=W1504,W1306
!
subroutine sb9coefstab(option, eps_prev,eps_curr,sig_prev,&
                        sig_curr,dsidep,poids, Ueff)  
!
!
implicit none
!
#include "asterf_types.h"
#include "jeveux.h"
#include "asterfort/calculUeff.h"
!
character(len=16), intent(in) :: option
real(kind=8), intent(in) :: eps_prev(6),eps_curr(6),sig_prev(6),sig_curr(6),dsidep(6,6),poids
real(kind=8), intent(out) :: Ueff
!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute non-linear options for non-linear behaviours - GROT_GDEP
!
! --------------------------------------------------------------------------------------------------
!
    aster_logical :: l_resi,l_rigi
    real(kind=8) :: u1eff

    l_resi = option(1:9) .eq. 'FULL_MECA' .or. option(1:9) .eq. 'RAPH_MECA'
    l_rigi = option(1:10) .eq. 'RIGI_MECA_' .or. option(1: 9) .eq. 'FULL_MECA'


    call calculUeff(sig_prev, eps_prev, u1eff)
    if (u1eff .eq. 0.d0) then
       u1eff = (dsidep(4,4)+dsidep(5,5)+dsidep(6,6))/3.d0
    endif
    Ueff = Ueff + u1eff*poids/8.d0

end subroutine
