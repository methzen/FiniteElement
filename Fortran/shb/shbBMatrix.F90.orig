! --------------------------------------------------------------------
! Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
!
subroutine shbBMatrix(nb_node, nb_dof,l_large,&
                      zeta   , geom  ,disp,det, B, &
                      BXI, BXIZETA,BETA,BETAZETA)
!
implicit none
!
#include "asterf_types.h"
#include "asterfort/assert.h"
#include "asterfort/calculB9.h"
#include "asterfort/matriceBcart.h"
#include "asterfort/Jacobien.h"
#include "asterfort/matinv.h"
!
aster_logical, intent(in) :: l_large
integer, intent(in) :: nb_node, nb_dof
real(kind=8), intent(in) :: geom(3*nb_node), zeta,disp(nb_dof)
real(kind=8), intent(out) :: B(6, nb_dof),BXI(6, 3*nb_node), BXIZETA(6, 3*nb_node) 
real(kind=8), intent(out) :: BETA(6, 3*nb_node), BETAZETA(6, 3*nb_node),det


!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute B matrix at current Gauss point
!
! --------------------------------------------------------------------------------------------------
!
! In  nb_node          : number of nodes of element without pinch node(s)
! In  nb_dof           : number of dof
! In  zeta             : out-of-plane parametric component
! In  geom             : coordinates of element
! In  B0               : constant part of gradient matrix
! In  BZETA            : zeta part of gradient matrix
! In  BZETAZETA        : zeta x zeta part of gradient matrix
! Out B                : gradient B matrix
! Out B9               : gradient matrix for EAS effect
!
! --------------------------------------------------------------------------------------------------
!
    real(kind=8) :: B9(6),dispm(nb_dof)
    real(kind=8):: B0(6, 3*nb_node), BZETA(6, 3*nb_node), BZETAZETA(6, 3*nb_node)
    real(kind=8) :: J0(3,3), Jm1(3,3)
! --------------------------------------------------------------------------------------------------
!
    ASSERT(nb_node .eq. 8)
    ASSERT(nb_dof .eq. 25)
    B(:,:) = 0.d0

    if (l_large) then
        dispm=disp
    else
        dispm=0.d0
    endif
! - Compute initial jacobian matrix at center of element
!
    call Jacobien(nb_node, geom, (/0.d0, 0.d0, 0.d0/), J0)
!
! - Inverse jacobian matrix
!
    call matinv('S', 3, J0, Jm1, det)
    !WRITE(6,*) 'Jacobien: ',J0,Jm1,det
    call matriceBcart(nb_node  , geom,&
                      nb_dof   , dispm    ,&
                      B0       , BZETA    , BZETAZETA,&
                      BXI      , BETA     ,&
                      BXIZETA  , BETAZETA )
!
! - Compute component gradient for EAS effect
!
    call calculB9(nb_node, geom, zeta, B9)
!
! - Construct B matrix at current Gauss point
!
    B(1:6, 1:24) = B0+zeta*BZETA+zeta*zeta*BZETAZETA
    B(1:6, 25)   = B9
!
end subroutine
