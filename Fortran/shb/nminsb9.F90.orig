! --------------------------------------------------------------------
! Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
! This file is part of code_aster.
!
! code_aster is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! code_aster is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
! --------------------------------------------------------------------
! aslint: disable=W1504,W1306
!
subroutine nminsb9(BEHinteg ,&
                   typmod   , option  , fami      ,&
                   npg      , nb_node , nb_dof    , lgpg,&
                   jv_poids , jv_coopg, imate     ,&
                   angl_naut, compor  , carcri    ,&
                   time_prev, time_curr,&
                   geom_init, disp_prev, disp_incr,&
                   sigm     , vim      ,&
                   sigp     , vip      ,&
                   matuu    , vectu    ,&
                   codret)
!
use Behaviour_type
!
implicit none
!
#include "jeveux.h"
#include "asterfort/jevech.h"
#include "asterf_types.h"
#include "asterfort/assert.h"
#include "asterfort/codere.h"
#include "asterfort/nmcomp.h"
#include "asterfort/nmgeosb9.h"
#include "asterfort/shbBMatrix.h"
#include "asterfort/matriceBcart.h"
#include "asterfort/nmgrtgstab.h"
#include "asterfort/nmgrtgsb9.h"
#include "asterfort/calculUeff.h"
#include "asterfort/matriceBsb7.h"
#include "asterfort/assemBsb7.h"
#include "asterfort/mattbsb.h"
!
type(Behaviour_Integ), intent(in) :: BEHinteg
integer, intent(in) :: npg, imate, lgpg, nb_node, nb_dof
integer, intent(in) :: jv_poids, jv_coopg
character(len=*), intent(in) :: fami
character(len=8), intent(in) :: typmod(*)
character(len=16), intent(in) :: option, compor(*)
real(kind=8), intent(in) :: carcri(*)
real(kind=8), intent(in) :: time_prev, time_curr
real(kind=8), intent(in) :: geom_init(3*nb_node), disp_prev(nb_dof), disp_incr(nb_dof)
real(kind=8), intent(in) :: angl_naut(*)
real(kind=8), intent(in) :: sigm(6,npg), vim(lgpg,npg)
real(kind=8), intent(out) :: sigp(6,npg), vip(lgpg,npg)
real(kind=8), intent(out) :: matuu(*), vectu(*)
integer, intent(out) :: codret
!
! --------------------------------------------------------------------------------------------------
!
! Solid-shell element
!
! Compute non-linear options for non-linear behaviours - Small strains
!
! --------------------------------------------------------------------------------------------------
!
! In  BEHinteg         : parameters for integration of behaviour
! In  typmod           : type of modelization
! In  option           : option to compute
! In  fami             : Gauss family for integration point rule
! In  npg              : number of Gauss points
! In  nb_node          : number of nodes of element without pinch node(s)
! In  nb_dof           : number of dof
! In  lgpg             : length of internal state variable vector
! In  jv_poids         : JEVEUX adress to weight of Gauss points
! In  jv_coopg         : JEVEUX adress to coordinates of Gauss points
! In  geom_init        : initial coordinates of element
! In  imate            : coded material address
! In  angl_naut        : nautical angles for anistropic material
! In  compor           : behaviour
! In  carcri           : parameters for behaviour
! In  time_prev        : time at beginning of time step
! In  time_curr        : time at end of time step
! In  geom_init        : initial coordinates of element
! In  disp_prev        : displacements of element at beginning of time step
! In  disp_incr        : increment of displacements of element
! In  disp             : displacements of element
! In  sigm             : stresses at beginning of time step
! In  vim              : internal state variables at beginning of time step
! Out sigp             : stresses at end of time step
! Out vip              : internal state variables at end of time step
! Out vectu            : internal force vector
! Out matuu            : tangent matrix
! Out codret           : return code for error
!
! --------------------------------------------------------------------------------------------------
!
    integer :: i_tens, kpg,i,j,k
    integer :: cod(npg)
    aster_logical :: l_large,sb9,sb7
    real(kind=8) :: poids, zeta, det
    real(kind=8), dimension(6,6) :: dsidep
    real(kind=8) :: epsi(6), epsi_incr(6)
    real(kind=8) :: disp_init(24)
    real(kind=8) :: sigma(6), sigm_norm(6)
    real(kind=8), parameter :: rac2 = sqrt(2.d0)
    real(kind=8) :: B0(6,24), B9(6), B(6, nb_dof)
    real(kind=8) :: BXI(6,24), BETA(6,24), BZETA(6,24)
    real(kind=8) :: BXIZETA(6,24), BETAZETA(6,24), BZETAZETA(6,24)
    real(kind=8) :: u1eff, ueff,jacgau,tBsDBs(3*nb_node,3*nb_node)
    real(kind=8) :: Bstab(2,18),eye(2,2),disp_curr(nb_dof)
!
! --------------------------------------------------------------------------------------------------
!
    sb9=(nb_node .eq. 8).and.(nb_dof .eq. 25)
    sb7=(nb_node .eq. 6).and.(nb_dof .eq. 19)
    ASSERT(sb9.or.sb7)
    cod       = 0
    disp_init = 0.d0
    Bstab=0.d0
    eye=0.d0
    eye(1,1)=1.d0
    eye(2,2)=1.d0
!
! - For non-linear kinematic option
!
    l_large = ASTER_FALSE
!
! - Compute the deformation gradient in cartesian base
!
    if (sb9) then
    u1eff     = 0.d0
    ueff      = 0.d0
    !B0=0.d0
    !BXI=0.d0
    !BETA=0.d0
    !BZETA=0.d0
    !BXIZETa=0.d0
    !BETAZETA=0.d0
    !BZETAZETA=0.d0 
!
! - Loop on Gauss points
!
        disp_curr(:)=disp_prev(:)+disp_incr(:)
        do kpg = 1, npg
        !WRITE(6,*) 'Point de Gauss: ',kpg
            zeta  = zr(jv_coopg-1+3*kpg)
            poids = zr(jv_poids+kpg-1)
! 
! ----- Compute B matrix at current Gauss point
!
            call    nmgeosb9(l_large   ,nb_node  , nb_dof,&
                              geom_init, zeta    , disp_prev,&
                                    det, epsi)
!
! ----- Compute increment of small strains
!
            call nmgeosb9(l_large   ,nb_node  , nb_dof,&
                              geom_init, zeta    , disp_incr,&
                                    det, epsi_incr)                
!
!-------Readjust strain for behavorial law
!
            epsi(4) = epsi(4)/rac2
            epsi(5) = epsi(5)/rac2
            epsi(6) = epsi(6)/rac2
!
            epsi_incr(4) = epsi_incr(4)/rac2
            epsi_incr(5) = epsi_incr(5)/rac2
            epsi_incr(6) = epsi_incr(6)/rac2
!
! ----- Prepare stresses
            do i_tens = 1, 3
                sigm_norm(i_tens) = sigm(i_tens,kpg)
                sigm_norm(i_tens+3) = sigm(i_tens+3,kpg)*rac2
            end do
! ----- Integrate behaviour law
            call nmcomp(BEHInteg   ,&
                        fami       , kpg        , 1        , 3        , typmod        ,&
                        imate      , compor     , carcri   , time_prev, time_curr     ,&
                        6          , epsi       , epsi_incr, 6        , sigm_norm     ,&
                        vim(1, kpg), option     , angl_naut,&
                        sigma      , vip(1, kpg), 36       , dsidep   , &
                        cod(kpg))
            if (cod(kpg) .eq. 1) then
                goto 999
            endif
            sigm_norm(4)    = sigm_norm(4)/rac2
            sigm_norm(5)    = sigm_norm(5)/rac2
            sigm_norm(6)    = sigm_norm(6)/rac2
            sigma(4)        = sigma(4)/rac2
            sigma(5)        = sigma(5)/rac2
            sigma(6)        = sigma(6)/rac2
            epsi(4)         = epsi(4)*rac2
            epsi(5)         = epsi(5)*rac2
            epsi(6)         = epsi(6)*rac2
            dsidep(4:6,4:6) = dsidep(4:6,4:6)/2.d0
            dsidep(4:6,1:3) = dsidep(4:6,1:3)/rac2
            dsidep(1:3,4:6) = dsidep(1:3,4:6)/rac2
!
! ----- Compute effective shear modulus for Stabilization
!
            call calculUeff(sigma-sigm_norm, epsi_incr, dsidep(5,5),u1eff)
            !if (u1eff .eq. 0.d0) then
            !    u1eff = dsidep(5,5)
            !endif
            Ueff = Ueff + u1eff*poids/8.d0
!
! ----- Compute elastic matrix and linear internal force at current Gauss point
!
            call nmgrtgsb9(option   , l_large,&
                           nb_node  , nb_dof ,&
                           geom_init, zeta   ,&
                           det*poids, dsidep ,&
                           disp_curr, disp_prev,&
                           sigma    , sigm_norm,&
                           matuu    , vectu )
!
! ----- Compute stresses
            if (option(1:9) .eq. 'FULL_MECA' .or. option(1:9) .eq. 'RAPH_MECA') then
                do i_tens = 1, 6
                    sigp(i_tens, kpg) = sigma(i_tens)
                end do
            endif
        enddo
!----- - Compute stabilization for matrix and internal force
!
        call nmgrtgstab(option   , l_large,&
                        nb_node  , nb_dof ,&
                        geom_init, disp_curr   ,disp_prev,&
                        Ueff     ,&
                        matuu    , vectu)

        !call nmgrtgstab(option   , l_large  ,&
        !            nb_node  , nb_dof   ,&
        !            geom_init, disp_incr,disp_init,&
        !            det      , Ueff     ,&
        !            BXI      , BETA     ,&
        !            BETAZETA , BXIZETA  ,&
        !            matuu    , vectu)
!
!-----------------------------SB7---------------------------------------------------
!
    else 
!
! - Loop on Gauss points
!
        do kpg = 1, npg
!
            zeta  = zr(jv_coopg-1+3*kpg)
            poids = zr(jv_poids+kpg-1)
! ----- Compute B matrix at current Gauss point
!
            call assemBsb7(nb_node,geom_init,zeta,B,Bstab,det)
!
!-------Compute small strain sb7 
!
            epsi=matmul(B,disp_prev)
            epsi_incr=matmul(B,disp_incr)
!
!-------Readjust strain for behavorial law
!
            epsi(4) = epsi(4)/rac2
            epsi(5) = epsi(5)/rac2
            epsi(6) = epsi(6)/rac2
            epsi_incr(4) = epsi_incr(4)/rac2
            epsi_incr(5) = epsi_incr(5)/rac2
            epsi_incr(6) = epsi_incr(6)/rac2
!
! ----- Prepare stresses
            do i_tens = 1, 3
                sigm_norm(i_tens) = sigm(i_tens,kpg)
                sigm_norm(i_tens+3) = sigm(i_tens+3,kpg)*rac2
            end do
!
! ----- Integrate behaviour law
!
            call nmcomp(BEHInteg   ,&
                        fami       , kpg        , 1        , 3        , typmod        ,&
                        imate      , compor     , carcri   , time_prev, time_curr     ,&
                        6          , epsi       , epsi_incr, 6        , sigm_norm     ,&
                        vim(1, kpg), option     , angl_naut,&
                        sigma      , vip(1, kpg), 36       , dsidep   , &
                        cod(kpg))
            if (cod(kpg) .eq. 1) then
                goto 999
            endif
            sigm_norm(4)    = sigm_norm(4)/rac2
            sigm_norm(5)    = sigm_norm(5)/rac2
            sigm_norm(6)    = sigm_norm(6)/rac2
            sigma(4)        = sigma(4)/rac2
            sigma(5)        = sigma(5)/rac2
            sigma(6)        = sigma(6)/rac2
            dsidep(4:6,4:6) = dsidep(4:6,4:6)/2.d0
            dsidep(4:6,1:3) = dsidep(4:6,1:3)/rac2
            dsidep(1:3,4:6) = dsidep(1:3,4:6)/rac2
!
!------- Stabilization parameter
!
            Ueff=dsidep(3,3)/1200.d0
            jacgau=det*poids
!
! ----- Compute elastic matrix and linear internal force at current Gauss point
            !call nmgrtgsb9(option   , l_large,&
            !               nb_node  , nb_dof ,&
            !               geom_init, zeta   ,&
            !               jacgau   , dsidep ,&
            !               sigma    , sigm_norm,B,&
            !               matuu    , vectu)
            call nmgrtgsb9(option   , l_large,&
                           nb_node  , nb_dof ,&
                           geom_init, zeta   ,&
                           jacgau   , dsidep ,&
                           disp_curr, disp_prev,&
                           sigma    , sigm_norm,&
                           matuu    , vectu )
!-----------Stabilization of twist mode 
            call mattbsb(eye*Ueff, 2, 3*nb_node, Bstab, tBsDBs)
            k = 0
            do i = 1, 3*nb_node
                do j = 1, i
                    k = k + 1
                    matuu(k) = matuu(k) + jacgau*tBsDBs(i,j)
                enddo
            enddo
            do i = 1, 3*nb_node
                do j = 1, 3*nb_node
                    vectu(i) = vectu(i) + tBsDBs(i,j)*disp_incr(j)*jacgau
                enddo
            enddo
!
! ----- Compute stresses
            if (option(1:9) .eq. 'FULL_MECA' .or. option(1:9) .eq. 'RAPH_MECA') then
                do i_tens = 1, 6
                    sigp(i_tens, kpg) = sigma(i_tens)
                end do
            endif
        enddo

    endif
!
!
999 continue
!
! - Return code summary
!
    call codere(cod, npg, codret)
!
end subroutine
